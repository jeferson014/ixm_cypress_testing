# Nombre del workflow que aparecerá en la pestaña Actions de GitHub
name: Cypress Tests

# Define cuándo se ejecutará el pipeline
on:
  # Se ejecutará cuando haya un push a la rama main
  push:
    branches: [ main ]
  # Se ejecutará cuando haya un pull request a la rama main
  pull_request:
    branches: [ main ]

# Define los jobs que se ejecutarán
jobs:
  # Nombre del job
  cypress-run:
    # Especifica el sistema operativo donde se ejecutará
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    # Define los pasos que se ejecutarán en secuencia
    steps:
      # Paso 1: Obtener el código del repositorio
      - name: Checkout
        # Usa la acción oficial de GitHub para hacer checkout del código
        uses: actions/checkout@v3

      # Paso 2: Instalar dependencias (esto también generará el lockfile si no existe y se ejecuta 'npm install')
      - name: Install Dependencies
        run: npm ci

      # Paso 3: Crear directorios para videos y screenshots si no existen
      - name: Create Cypress directories
        run: |
          mkdir -p cypress/videos
          mkdir -p cypress/screenshots
          mkdir -p cypress/reports/html
          # Crear archivos .gitkeep para mantener las carpetas en el repositorio
          touch cypress/videos/.gitkeep
          touch cypress/screenshots/.gitkeep
          touch cypress/reports/html/.gitkeep
          # Asegurar que las carpetas se mantengan en el repositorio
          git add -f cypress/videos/.gitkeep cypress/screenshots/.gitkeep cypress/reports/html/.gitkeep cypress/reports/.gitkeep
          git commit -m "Asegurar que las carpetas de Cypress existan en el repositorio" || true

      # Paso 4: Ejecutar las pruebas de Cypress
      - name: Cypress run
        # Usa la acción oficial de Cypress para GitHub Actions
        uses: cypress-io/github-action@v6
        # Configuración específica de la acción
        with:
          # Comando para iniciar la aplicación
          start: npm start
          # Espera a que la URL esté disponible antes de ejecutar las pruebas
          wait-on: 'https://ixm-nexusdev.azurewebsites.net'
          # Configura la URL base para las pruebas
          config: baseUrl=https://ixm-nexusdev.azurewebsites.net
          # Especifica el navegador a usar
          browser: chrome
          # Desactivamos la grabación en Cypress Cloud
          record: false
        # Variables de entorno necesarias
        env:
          # Token de GitHub para autenticación
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Paso 5: Subir las grabaciones al repositorio como artefactos
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos
          retention-days: 30

      # Paso 6: Subir las capturas de pantalla al repositorio como artefactos
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          retention-days: 30

      # Paso 7: Subir el reporte Mochawesome como artefacto
      - name: Upload Mochawesome Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mochawesome-report
          path: cypress/reports/html
          retention-days: 30

      # Paso 8: Listar contenido de cypress/videos para depurar
      - name: List Cypress Videos Content
        run: ls -l cypress/videos/
        if: always()

      # Paso 9: Copiar los videos a una carpeta en el repositorio
      - name: Copy Videos to Repo Folder
        run: |
          mkdir -p uploaded-videos
          # Usar find para copiar solo si hay archivos (evitar error si la carpeta está vacía)
          find cypress/videos/ -mindepth 1 -maxdepth 1 -exec cp -R {} uploaded-videos/ \; || echo "No videos found to copy."
        # Intentar copiar siempre si Cypress corrió (éxito o fallo)
        if: always()

      # Paso 10: Commitear y pushear los videos a la rama main
      - name: Deploy Videos to GitHub Repo
        run: |
          # Configurar la identidad de Git ANTES de commitear
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Agregar los archivos copiados
          git add uploaded-videos/ cypress/reports/html/videos/
          # Commitear solo si hay cambios staged, ignorar error si no hay nada
          git commit -m "feat: Cargar videos de Cypress a uploaded-videos [skip ci]" || true
          # Pushear a la rama main
          git push origin main
        # Intentar pushear siempre si se intentó copiar (el commit || true maneja el caso sin cambios)
        if: always()

      # Paso 11: Configurar Git para commitear desde el workflow para el reporte
      - name: Git Config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
      # Paso 12: Copiar el reporte a la carpeta docs
      - name: Copy Report to Docs
        run: |
          mkdir -p docs
          cp -R cypress/reports/html/* docs/
        if: success()
        
      # Paso 13: Crear .nojekyll file para evitar que GitHub Pages use Jekyll
      - name: Create .nojekyll file
        run: echo "" > docs/.nojekyll
        if: success()
        
      # Paso 14: Commitear y pushear los cambios a la rama main para GitHub Pages
      - name: Deploy Report to GitHub Pages
        run: |
          git add docs
          git commit -m "Actualizar reporte de Cypress en GitHub Pages"
          git push origin main
        if: success()

      # Paso 15: Enviar notificación a Microsoft Teams demo
      - name: Send Teams notification
        if: always()
        uses: dchourasia/ms-teams-notification@1.0
        with:
          github-token: ${{ github.token }}
          webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          # Esta acción construirá una tarjeta completa automáticamente.
          #enable-view-status: true  # Por defecto es true
          # Opcional: Personalizar el texto del botón de ver estado
          view-status-action-text: "Ver Ejecución en GitHub Actions"